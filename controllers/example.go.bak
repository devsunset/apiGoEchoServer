package controllers

import (
	_ "apiServer/docs" // docs is generated by Swag CLI, you have to import it.
	"apiServer/models"
	"io"
	"net/http"
	"os"

	"github.com/labstack/echo/v4"
)

/////////////////////////////////////////////////////////////////
//
//	Example
//
/////////////////////////////////////////////////////////////////

// getPathParameters godoc
// @Summary  example get value from path
// @Description get value from path
// @Tags Example
// @ID getPathParameters
// @Accept */*
// @Produce plain
// @Param id path string true "1"
// @Success 200 {string} path param
// @Router /getPathParameters/{id} [get]
func GetPathParameters(c echo.Context) error {
	// curl -GET http://localhost:8282/getPathParameters/1
	// Get value from path
	id := c.Param("id")
	return c.String(http.StatusOK, "id:"+id)
}

// getQueryParameters godoc
// @Summary  example get value from the query string
// @Description get value from the query string
// @Tags Example
// @ID  getQueryParameters
// @Accept */*
// @Produce plain
// @Param id query string true "1"
// @Param name query string true "2"
// @Success 200 {string} query param
// @Router /getQueryParameters [get]
func GetQueryParameters(c echo.Context) error {
	// curl -GET http://localhost:8282/getQueryParameters?id=1&name=2
	// Get value from the query string
	id := c.QueryParam("id")
	name := c.QueryParam("name")
	return c.String(http.StatusOK, "id:"+id+", name:"+name)
}

// postSave godoc
// @Summary  example get value from the form
// @Description get value from the form
// @Tags Example
// @ID  postSave
// @Accept  application/x-www-form-urlencoded
// @Produce plain
// @Param id  formData string true "1"
// @Param name formData string true "2"
// @Success 200 {string} formData
// @Router /postSave [post]
func PostSave(c echo.Context) error {
	// curl -F "id=1" -F "name=2"  http://localhost:8282/postSave
	// Get id and name
	// Form application/x-www-form-urlencoded
	id := c.FormValue("id")
	name := c.FormValue("name")
	return c.String(http.StatusOK, "id:"+id+", name:"+name)
}

// postSavefile godoc
// @Summary  example get value/file from the form
// @Description get value/file from the form
// @Tags Example
// @ID  postSavefile
// @Accept multipart/form-data
// @Produce plain
// @Param name formData string true "2"
// @Param avatar  formData file true "-"
// @Success 200 {string} formData
// @Router /postSavefile [post]
func PostSavefile(c echo.Context) error {
	// curl -F "name=2" -F "avatar=@/path/to/your/avatar.txt" http://localhost:8282/postSavefile
	// Get name
	name := c.FormValue("name")
	// Get avatar
	avatar, err := c.FormFile("avatar")
	if err != nil {
		return err
	}
	// Source
	src, err := avatar.Open()
	if err != nil {
		return err
	}
	defer src.Close()
	// Destination
	dst, err := os.Create("upload/" + avatar.Filename)
	if err != nil {
		return err
	}
	defer dst.Close()
	// Copy
	if _, err = io.Copy(dst, src); err != nil {
		return err
	}
	return c.HTML(http.StatusOK, "<b>Thank you! "+name+"</b>")
}

// users godoc
// @Summary  example get value from the form/json
// @Description get value from the form/json
// @Tags Example
// @ID  users
// @Accept  application/x-www-form-urlencoded
// @Produce json
// @Param id  formData string true "1"
// @Param name formData string true "2"
// @Success 200 {object} models.User
// @Router /users [post]
func Users(c echo.Context) error {
	//curl -d '{"id":"1", "name":"2"}'  -H "Content-Type: application/json"  -X POST http://localhost:8282/users
	//Handling RequestBind json, xml, form or query payload into Go struct based on Content-Type request header.
	//Render response as json or xml with status code.
	u := new(models.User)
	if err := c.Bind(u); err != nil {
		return err
	}
	return c.JSON(http.StatusCreated, u)
	// or
	// return c.XML(http.StatusCreated, u)
}
