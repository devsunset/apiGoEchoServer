// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://devsunset.github.io",
            "email": "devsunset@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/getLocation": {
            "get": {
                "description": "get tesla Chargers Location.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Tesla App"
                ],
                "summary": "Tesla Chargers Location.",
                "operationId": "getLocation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "asia_pacific",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "South Korea",
                        "name": "country",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "서울특별시",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "supercharger",
                        "name": "location_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "28865",
                        "name": "nid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "여의도",
                        "name": "title",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Locations"
                        }
                    }
                }
            }
        },
        "/getLocationCity": {
            "get": {
                "description": "get tesla Chargers Location City.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Tesla App"
                ],
                "summary": "Tesla Chargers Location City.",
                "operationId": "getLocationCity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "South Korea",
                        "name": "country",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Citys"
                        }
                    }
                }
            }
        },
        "/getLocationCountry": {
            "get": {
                "description": "get tesla Chargers Location Country.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Tesla App"
                ],
                "summary": "Tesla Chargers Location Country.",
                "operationId": "getLocationCountry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "asia_pacific",
                        "name": "region",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Countrys"
                        }
                    }
                }
            }
        },
        "/getLocationRegion": {
            "get": {
                "description": "get tesla Chargers Location Region.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Tesla App"
                ],
                "summary": "Tesla Chargers Location Region.",
                "operationId": "getLocationRegion",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Regions"
                        }
                    }
                }
            }
        },
        "/getLocationType": {
            "get": {
                "description": "get tesla Chargers Location Type.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Tesla App"
                ],
                "summary": "Tesla Chargers Location Type.",
                "operationId": "getLocationType",
                "parameters": [
                    {
                        "type": "string",
                        "description": "South Korea",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "서울특별시",
                        "name": "city",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Location_types"
                        }
                    }
                }
            }
        },
        "/healthCheck": {
            "get": {
                "description": "get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Tesla App"
                ],
                "summary": "Show the status of server.",
                "operationId": "HealthCheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.City": {
            "type": "object",
            "properties": {
                "City": {
                    "type": "string"
                }
            }
        },
        "models.Citys": {
            "type": "object",
            "properties": {
                "Citys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.City"
                    }
                }
            }
        },
        "models.Country": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                }
            }
        },
        "models.Countrys": {
            "type": "object",
            "properties": {
                "countrys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Country"
                    }
                }
            }
        },
        "models.Location": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "address_line_1": {
                    "type": "string"
                },
                "address_line_2": {
                    "type": "string"
                },
                "address_notes": {
                    "type": "string"
                },
                "amenities": {
                    "type": "string"
                },
                "baidu_lat": {
                    "type": "string"
                },
                "baidu_lng": {
                    "type": "string"
                },
                "chargers": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "common_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_dttm": {
                    "type": "string"
                },
                "destination_charger_logo": {
                    "type": "string"
                },
                "destination_website": {
                    "type": "string"
                },
                "directions_link": {
                    "type": "string"
                },
                "emails": {
                    "type": "string"
                },
                "geocode": {
                    "type": "string"
                },
                "hours": {
                    "type": "string"
                },
                "is_gallery": {
                    "type": "string"
                },
                "kiosk_pin_x": {
                    "type": "string"
                },
                "kiosk_pin_y": {
                    "type": "string"
                },
                "kiosk_zoom_pin_x": {
                    "type": "string"
                },
                "kiosk_zoom_pin_y": {
                    "type": "string"
                },
                "latitude": {
                    "type": "string"
                },
                "location_id": {
                    "type": "string"
                },
                "location_type": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "nid": {
                    "type": "string"
                },
                "open_soon": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "province_state": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "sales_phone": {
                    "type": "string"
                },
                "sales_representative": {
                    "type": "string"
                },
                "sl_translate": {
                    "type": "string"
                },
                "sub_region": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "trt_id": {
                    "type": "string"
                }
            }
        },
        "models.Location_type": {
            "type": "object",
            "properties": {
                "Location_type": {
                    "type": "string"
                }
            }
        },
        "models.Location_types": {
            "type": "object",
            "properties": {
                "Location_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Location_type"
                    }
                }
            }
        },
        "models.Locations": {
            "type": "object",
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Location"
                    }
                }
            }
        },
        "models.Region": {
            "type": "object",
            "properties": {
                "region": {
                    "type": "string"
                }
            }
        },
        "models.Regions": {
            "type": "object",
            "properties": {
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Region"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "193.123.248.85:80",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "apiServer  API",
	Description: "This is a apiServer.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
