/*
	########## dev ##########
	go install & path setting -> https://golang.org/
	EchoHigh performance, extensible, minimalist Go web framework
	https://echo.labstack.com/
	mkdir -p /workspace/devwork/apiServer
	cd /workspace/devwork/apiServer
	go mod init apiServer
	go get github.com/labstack/echo/v4
	go get github.com/labstack/echo/middleware
	go mod download golang.org/x/time
	coding main.go (swagger_apply_pre_main.go)
	https://pkg.go.dev/github.com/amarnus/echo-swagger#readme-echo-swagger
	go get github.com/swaggo/swag/cmd/swag
	cd /workspace/devwork/apiServer
	$GOPATH/go/bin/swag init (in project directory)
	go get -u github.com/swaggo/echo-swagger
	go mod download github.com/alecthomas/template
	go get github.com/alecthomas/template@v0.0.0-20190718012654-fb15b899a751
	coding main.go
        https://github.com/swaggo/swag#declarative-comments-format
*/
package main

import (
	"apiServer/controllers"
	_ "apiServer/docs" // docs is generated by Swag CLI, you have to import it.
	"fmt"
	"net/http"

	_ "github.com/lib/pq"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title apiServer  API
// @version 1.0
// @description This is a apiServer.

// @contact.name API Support
// @contact.url https://devsunset.github.io
// @contact.email devsunset@gmail.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host 193.123.252.22
// @BasePath /
func main() {

	e := echo.New()

	e.GET("/", func(c echo.Context) error {
		return c.String(http.StatusOK, "Hello, World!")
	})

	e.Pre(func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			fmt.Println("---------- request  - start ----------", c.QueryParams())
			err := next(c)
			fmt.Println("---------- response - end ----------", err)
			return err
		}
	})

	//Middleware
	e.Use(middleware.RequestID())
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowMethods: []string{echo.GET, echo.HEAD, echo.PUT, echo.PATCH, echo.POST, echo.DELETE},
	}))
	e.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{
		TokenLookup: "header:X-XSRF-TOKEN",
	}))

	// Routing
	e.GET("/healthCheck", HealthCheck)
	e.GET("getLocationRegion", controllers.GetLocationRegion)
	e.GET("getLocationCountry", controllers.GetLocationCountry)
	e.GET("getLocationCity", controllers.GetLocationCity)
	e.GET("getLocationType", controllers.GetLocationType)
	e.GET("getLocation", controllers.GetLocation)

	/*
		    // example
			e.GET("/getPathParameters/:id", controllers.GetPathParameters)
			e.GET("/getQueryParameters", controllers.GetQueryParameters)
			e.POST("postSave", controllers.PostSave)
			e.POST("postSavefile", controllers.PostSavefile)
			e.POST("users", controllers.Users)
	*/

	// Static Content
	e.Static("static", "static")

	// Swagger
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	e.Logger.Fatal(e.Start(":8282"))
}

// HealthCheck godoc
// @Summary Show the status of server.
// @Description get the status of server.
// @Tags API Tesla App
// @ID HealthCheck
// @Accept */*
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router /healthCheck [get]
func HealthCheck(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"data": "Server is up and running",
	})
}
